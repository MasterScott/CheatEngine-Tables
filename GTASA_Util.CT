<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <Forms>
    <GTASAForm Class="TCEForm" Encoding="Ascii85">-C0d?,e8=a/:FB@.x:y6riFHPN}TQ?O,SEk2s1E[;okEj4waK_VCbx,wWYBlxzf6JhT,I=WSA*zX7}pThaS0b.umm,3%]JYAHc3w-[_CMYcAyCNV_I8:Y8MjeRs9];#88Mb}o:xt$JhAvJZ:oS}a.w_C?V@Iyl:C@IJ(oYB,l?lWkf3=B_*;fv#dL]+TLB!#;t6Gr!/I1op6Q::f.9Zs@Fw!DD51=LSqd.4)fkkW{tCGKNP?lK;ZXEk}zlQl*Rnij9z2Cr:=.C:,UR4Jo{1YgDZbuvNntDw:z%ZH+YuuLX}%xJYS:5?RVo4?g!UCTtrBPz1mr3N6?f,A6X_K?f[;%+Fs=%baJU=81c=vp*JI7k$n^^}_y=(z:DUyNls72d/$JlA0#+UFk]SQAGDvXgVVZ6:Hf9c2V6jv27WZ+wx)(HB-=nTh;*XxvY8jrCf7pB6{$uCCq{sm:D$X9QrF2p/^1YWc2W2IQo=Om?sfYIUGFB@0OR^Gdw.*Z#-e2McB[?w(LncTnS]Wswr51foMpi.)?JWw5b#EFj%LYgFP{o4_@0wf/2dH0rnWUu)*B-Fw1=Y:w@4#*dmgzwyC0#D1;/si2{%ltRaLWX8Z*7C0:#)=!ZQ%Il%n@j=4TXAtv*znV4*ZP(^IuNl@8r%ggN9hl4)uy$[86awrR=?jnw9U,]4.WkB,xXNStLL!JYO8H?:%O6-#BXw,P,ti+g@ac*aDael6a9PApu=(aqPA,Ua#.edyzJ=H]k2Ug#]bLiZZTv))QbEM!g$*nQt=!+cqN@RMt+2EgJ/IH$bo7?,-k$oe09^d]5u)H:z2_eIi4Ll(-Nbh5yqK/AN@:4Eu0[}d)RmWo}J3Y(Di6.[u#wm0?9:}u_Y48h_k2zT{k15p]%XdPeY^NPYqnafm8)}s#;z@s.nd-7w!y[DR)HH6)G]nchppRvT8+9eq*UoFF)6EzCpN:v16J{wQNzH/_K56d@;LSm:9js=;q:!GTvdzT^]n)(8mS!WU(bXMxbx(Zwg]BU}2ewTr2e9Si[O:P#e{Kop;r5ftoIpfaZ#.%:WE8w#=(8bsPBTzK!ovl)UH#.?s}/DRr!S1ao^S8nU?,7mrYnM?Swmo%fRF}*+dlffVAytmWz,E=B@WFnt9r-1Lp!=e[$$fHwel^cVXa$,WfuwuWOY5TVZRs(UilF]MEl5g2nk.NQpGUgRv^6YKfK6?IPiRlG5^Whb,BjlOlxSyn1],VOeBk@Y9gF2!IcKT!nu!3+KfnM=WK=_mbAW]XMMNA]tG6bD9Nt7#L9lccqQXHUC(LT^HL8ZX;7vq4;RfE7vF#FPJ1}u/cUTrMT?Ut,m[9$o0ZF:PmaC7z4Xatc:bTHXwK}Fq3R}a1wFAzj$uxp%M]Oy=p^9S=OwR*3^z7]sh/hsn[g_aGD)1PBb/*/8YPo3JYC87F]iw.BxofnrWoIvq-bSE8xvnUUxkF1Ws59Ma!*r5:eBDTtlo8y64^EB.]Ek6dW{)k#teHN!_y_eZ.mr0cE=zj!:6#}$)=;#.0QY1XRfTz%uLYfhNo.Dy%W}q/66gjv}=@.R6S9cId4d[i8crPHJbIfV@hB5@k)+wbA:c3L?!xz4-fsLqY}XjvE=@JPCGHGW_AjHw3wctL#q-)(]Vy1BbGQ;jm,StGBRiS@rcgo:)w-Sj^E!#;#NM9d7IxP#?9%WY#Cu]zP2N8KdW!mp303?+(Xs@?psX@,97WQ]2r#ASO#:T=!8=dE1D#A]kVR*sSNOw0i:i6/nHr[HtgVq$GVA{H5uDP;P^vv2qm@^qO%Kyr^w+mX(OhxlB_$O7#q-bq;_(1cMq(9)1?M9MPyPABX%#*NrBw{[a.?!nFz^pQi*pQXeBy?E0+Y[;D9tv@S[YG$;OLu4+djil0fF?+OU^Z6G,FMewric3OkG5yuW4P9y)%SF2^Rm$(2#uVUxV!eMQ.4PY)+P*$NjtmFCWqZCT!K=tmB2+69S!r/F:gRU1SFN8T_WN3RS1v}81!WV#o{I0o,%2s;M4-Vfs,c]VQSUqbKSBAB3SSZ!$BHY{1o;MsohR8/:{j-fj@SU:9ieI5Vo/8PkgOcR,^a:ASBR/)#,ME1I#TY2!^y$A9A.yL#Oo;kZ;H!x}qIrR.^9mF8#f:[awpAB7HtV2T=7-Z%=v=FfL$K1=+D}$U($NU@ei0Y}u9X)!K/3Q8ti_5iPrlP;5sEn?G,N7-vFakBE8+u9b?W[:FAYg%lE^:PZP+E/P[[NKekDK%p%{MVFlT]mTkNB1FL,=8j8(D%**my6@YhbEis38.7Kf2*n4M78I@u+AxhRBY6FUd#FDT:!WJVJII,S74#(.G.?J-s^$C?wNwu#YrdG0-{:l^n?gfBym</GTASAForm>
  </Forms>
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>local settings

function debug(text)
    if settings:isEnabled("DebugOutputCheckbox") then
        print(text)
    end
end

----------------------
-- GTA:SA Utilities --
----------------------
GTASAUtil = {}

-- The following functions should be added to return true if these features
-- should be enabled:
--
-- self:isAutoAttachEnabled()
-- self:gameVersionDetected()
-- self:isDebugEnabled()
--
-- The following function is called when the game version has been detected:
--
-- self:gameVersionDetected(self.gameVersionDescription)


-- What to add to the relative 1.0 address to get the address for the current
-- version (e.g. also contains the process address, usually 0x400000).
GTASAUtil.gameVersionOffset = 0

-- Contains special addresses, that require more than an offset to work.
-- The key is the normal 1.0 address, the value the absolute address.
GTASAUtil.gameVersionAddr = {}

GTASAUtil.versionsDef = {
    {"008245BC",18313216,0,"1.0","1.0"},
    {"0082457C",18313216,0,"1.0","1.0"},
    {"0082533C",34471936,0x2680,"1.01","1.01"},
    {"008252FC",34471936,0x2680,"1.01","1.01"},
    {nil,17985536,0x2680,"2.0","2.0"},
    {"0085EC4A",9691136,0x75130,"3.0 Steam","3.0 Steam"},
    {"0085DEDA",0,0x75770,"1.01 Steam","1.01 Steam?"},
    {nil,9981952,0x77970,"Steam","Steam (not fully supported)"}
}

GTASAUtil.gameVersion = ""
GTASAUtil.gameVersionDescription = ""

function GTASAUtil:new()
    local object = {}
    setmetatable(object, self)
    self.__index = self
    return object
end

function GTASAUtil:debug(text)
    if self:isDebugEnabled() then
        print("[GTASAUtil] "..text)
    end
end

function GTASAUtil:init()
    self.autoAttachTimer = createTimer(nil, false)
    timer_onTimer(self.autoAttachTimer, function() self:autoAttach() end)
    timer_setInterval(self.autoAttachTimer, 5000)
    timer_setEnabled(self.autoAttachTimer, true)
end

function GTASAUtil:cleanUp()
    self:debug("Cleanup")
    object_destroy(self.autoAttachTimer)
end

function GTASAUtil:adjustAddress(addr)
    if type(addr) == "string" then
        addr = tonumber(addr)
    end
    if addr == nil then
        return nil
    end
    if self.gameVersionAddr[addr] ~= nil then
        return self.gameVersionAddr[addr]
    end
    return addr+self.gameVersionOffset
end

function GTASAUtil:getInteger(addr)
    return readInteger(self:adjustAddress(addr))
end

function GTASAUtil:getByte(addr)
    return readBytes(self:adjustAddress(addr), 1, false)
end

function GTASAUtil:getFloat(addr)
    return readFloat(self:adjustAddress(addr))
end

function GTASAUtil:autoAttach()
    if self:isAutoAttachEnabled() then
       self:attach(false)
    end
end

function GTASAUtil:attach(force)
    self:tryAttach("gta_sa.exe", force)
    self:tryAttach("gta-sa.exe", force)
end

function GTASAUtil:tryAttach(process, force)
    local processId = getProcessIDFromProcessName(process)
    if processId ~= nil then
       --self:debug("Check "..process..processId..getOpenedProcessID())
    end
    if (processId ~= getOpenedProcessID() or force) and processId ~= nil then
       openProcess(process)
       self.currentProcess = process
       self:debug("Opened process "..process)
       self:detectVersion()
    end
end

function GTASAUtil:detectVersion()
    self:debug("Detect version")
    self.gameVersion = ""
    self.gameVersionOffset = 0
    self.gameVersionAddr = {}

    -- Try to detect version by address
    -- (this doesn't work when CD hasn't been checked yet)
    local target = 38079
    for _,v in ipairs(self.versionsDef) do
        if v[1] ~= nil and readInteger(v[1]) == target then
            self.gameVersion = v[4]
            self.gameVersionDescription = v[5].." [detected by address]"
            self.gameVersionOffset = v[3] + getAddress(self.currentProcess)
        end
    end

    -- Detect by module size if no version detected yet
    if self.gameVersion == "" then
        local moduleSize = getModuleSize(self.currentProcess)
        for _,v in ipairs(self.versionsDef) do
            if v[2] ~= 0 and moduleSize == v[2] then
                self.gameVersion = v[4]
                self.gameVersionDescription = v[5].." [detected by module size]"
                self.gameVersionOffset = v[3] + getAddress(self.currentProcess)
            end
        end
    end

    -- Special Addresses
    if self.gameVersion == "Steam" then
        -- Steam Version needs more than an offset for some values
        local base = getAddress(self.currentProcess)
        self.gameVersionAddr[0x68B42C] = 0x702D98 + base
        self.gameVersionAddr[0x77CB84] = 0x80FD74 + base
        self.gameVersionAddr[0x773460] = 0x8002AC + base
    end

    if self.gameVersion == "" then
        self.gameVersionDescription = "Version Unknown"
    end

    self:gameVersionDetected(self.gameVersionDescription)
end

----------------------------
-- Initialize GTA:SA Util --
----------------------------

gtasa = GTASAUtil:new()
gtasa.isAutoAttachEnabled = function()
    return settings:isEnabled("AutoAttachCheckbox")
end

gtasa.gameVersionDetected = function(self, description)
    GTASAForm.GameVersion.Caption = "Game Version: "..description
end

gtasa.isDebugEnabled = function()
    return settings:isEnabled("DebugOutputCheckbox")
end

-------------------
-- Value Definition
-------------------

local progressValues = {
    {"0x7794E8","int","Lung Capacity","diff",60000},
    {"0x7794FC","int","Muscle","diff",150000},
    {"0x77950C","int","Max Health","diff",600000},
    {"0x779500","int","Stamina (Run)","diff",300000},
    {"0x7794D8","int","Stamina (Sprint)","diff",300000},
    {"0x7794DC","int","Stamina (Cycle)","diff",300000},
    {"0x7794E4","int","Stamina (Swim)","diff",180000},
    {"0x7794EC","int","Driving","diff",300000},
    {"0x7794F8","int","Bike","diff",180000},
    {"0x7794E0","int","Cycling","diff",120000},
    {"0x7794F0","int","Flying","diff",300000}
}
local statValues = {
	{"0x7791A4","int","Lung Capacity","diff"},
	{"0x7793DC","float","Muscle","diff"},
	{"0x7793D4","float","Fat","diff"},
	{"0x7793E0","float","Max Health","diff"},
	{"0x7793D8","float","Stamina","diff"},
	{"0x7790A0","int","Driving","diff"},
	{"0x7791B4","int","Bike","diff"},
	{"0x7791B8","int","Bicycle","diff"},
	{"0x77919C","int","Flying","diff"},
	{"0x7793E4","float","Sex Appeal","diff"},
	{"0x7794AC","float","Uzi/Tec9","diff"}
}

local phoneCalls = {
	[0]='Catalina (Mission)',
	[1]='Catalina (SF)',
	[2]='Catalina (Desert)',
	[3]='Catalina (LV)',
	[4]='Catalina (RTLS)',
	[5]='Catalina (End)',
	[6]="OGLoc",
	[7]="Cesar (Lowrider Race)",
	[8]="Cesar (Catalina)",
	[9]="Crash (Intro)",
	[10]="Cesar (Badlands Race)",
	[11]="Kendl (Loser)",
	[12]="Crash (Burning Desire)",
	[13]="Crash (High Noon)",
	[14]="Big Smoke",
	[15]="The Truth (Intro)",
	[16]="The Truth (AYGTSF)",
	[17]="The Truth (Green Goo)",
	[18]="Sweet (Doberman)",
	[19]="Sweet (Intro)",
	[20]="Sweet (Gym)",
	[21]="Sweet (Gym, fat)",
	[22]="Sweet (Gang Territories)",
	[23]="Sweet (End of the Line)",
	[24]="Sweet (Prison)",
	[25]="Sweet (Prison2)",
	[29]='Zero (Asset)',
	[30]="Zero (Mission)",
	[31]='Jethro (Driving School)',
	[32]="Jethro (Street Races)",
	[33]="Jethro (Wang Cars)",
	[34]="Woozie",
	[35]="Woozie",
	[36]="Woozie (Pass Key)",
    [38]="Woozie (Heist)",
	[41]="Toreno (Toreno Missions)",
	[42]="Toreno (Highjack)",
	[43]="Toreno (Interdiction)",
	[47]="Paul (Intensive Care)",
	[48]="Rosenberg (Freefall)",
	[49]="Rosenberg (Saint Mark's)",
	[50]="Rosenberg (Vertical Bird)",
    [51]="Leone (Rosenberg)",
}

local function currentCall(value)
    if gtasa:getInteger(0x64999C) == 1 then
		return phoneCalls[value]
	end
	return nil
end

local function callActive()
    if gtasa:getInteger(0x64999C) == 1 then
        if gtasa:getByte(0x773460) ~= 0 then
           return "Call Active (Holding)"
        end
		return "Call Active"
	else
        if gtasa:getByte(0x773460) ~= 0 then
           return "No Call (Holding)"
        end
    end
	return ""
end

local function callHeld(value)
    if value ~= 0 and gtasa:getInteger(0x64999C) == 1 then
		return "Call Held"
	end
	return ""
end

local function actionHeld(value)
	if value == 0 then
		return "-"
	end
	return "Pressed"
end

local phoneValues = {
	{"0x649FC4","int","OnMission"},
	--{"00A4999C","int","Phone ringing"},
	{"0x77CB84","int","Phone Timer",cf=function(v) return f(v - gtasa:getInteger("0x649C40"),0.001,3) end},
	{"0x64AF70","int","Calling",cf=currentCall},
	{"0x773460","byte","Action Key",cf=actionHeld},
}

local misc = {
	--{"40@","int","40@"},
	--{"54@","int","54@"},
    --{"0x773460","byte","Action Key",cf=callHeld, valueOnly=true},
    {"0x64AF70","int","Call",cf=callActive, valueOnly=true},
    {"0x649FC4","int","OnMission"},
    --{"0x77CB84","int","Phone Timer",cf=function(v) return f(v - gtasa:getInteger("0x649C40"),0.001,3) end},

    --{"0x7794EC","int","Driving XP","diff",300000},
    --{"0x7790A0","int","Driving Skill","diff"},
}

local previousHealth = 0
local OHKOTestOriginalText = nil

function getCurrentHealth()
    local addr = gtasa:getInteger("0x77CD98")
    if addr == nil then
       return 0
    end
    local result = readFloat(addr+1344)
    if result == nil then
        return 0
    end
    return result
end

function checkCurrentHealth()
    local health = getCurrentHealth()
    if OHKOTestOriginalText == nil then
        OHKOTestOriginalText = GTASAForm.OHKOTestCheckbox.Caption
    end
    if health &lt; previousHealth then
        beep()
    end
    previousHealth = health
    GTASAForm.OHKOTestCheckbox.Caption = string.format("%s [Current: %.1f]",
        OHKOTestOriginalText, health)
end

local carTypes = {[0] = "Car/Plane", [5] = "Boat", [6] = "Train", [9] = "Bike"}
local carNames = {
    [592] = "Andromeda",
    [577] = "AT-400",
    [511] = "Beagle",
    [512] = "Cropduster",
    [593] = "Dodo",
    [520] = "Hydra",
    [553] = "Nevada",
    [476] = "Rustler",
    [519] = "Shamal",
    [460] = "Skimmer",
    [513] = "Stuntplane",
    [548] = "Cargobob",
    [425] = "Hunter",
    [417] = "Leviathan",
    [487] = "Maverick",
    [488] = "News Chopper",
    [497] = "Police Maverick",
    [563] = "Raindance",
    [447] = "Seasparrow",
    [469] = "Sparrow",
    [472] = "Coastguard",
    [473] = "Dinghy",
    [493] = "Jetmax",
    [595] = "Launch",
    [484] = "Marquis",
    [430] = "Predator",
    [453] = "Reefer",
    [452] = "Speeder",
    [446] = "Squalo",
    [454] = "Tropic",
    [581] = "BF-400",
    [509] = "Bike",
    [481] = "BMX",
    [462] = "Faggio",
    [521] = "FCR-900",
    [463] = "Freeway",
    [510] = "Mountain Bike",
    [522] = "NRG-500",
    [461] = "PCJ-600",
    [448] = "Pizza Boy",
    [468] = "Sanchez",
    [586] = "Wayfarer",
    [602] = "Alpha",
    [496] = "Blista Compact",
    [401] = "Bravura",
    [518] = "Buccaneer",
    [527] = "Cadrona",
    [589] = "Club",
    [419] = "Esperanto",
    [587] = "Euros",
    [533] = "Feltzer",
    [526] = "Fortune",
    [474] = "Hermes",
    [545] = "Hustler",
    [517] = "Majestic",
    [410] = "Manana",
    [600] = "Picador",
    [436] = "Previon",
    [439] = "Stallion",
    [549] = "Tampa",
    [491] = "Virgo",
    [445] = "Admiral",
    [604] = "Damaged Glendale",
    [507] = "Elegant",
    [585] = "Emperor",
    [466] = "Glendale",
    [492] = "Greenwood",
    [546] = "Intruder",
    [551] = "Merit",
    [516] = "Nebula",
    [467] = "Oceanic",
    [426] = "Premier",
    [547] = "Primo",
    [405] = "Sentinel",
    [580] = "Stafford",
    [409] = "Stretch",
    [550] = "Sunrise",
    [566] = "Tahoma",
    [540] = "Vincent",
    [421] = "Washington",
    [529] = "Willard",
    [485] = "Baggage",
    [431] = "Bus",
    [438] = "Cabbie",
    [437] = "Coach",
    [574] = "Sweeper",
    [420] = "Taxi",
    [525] = "Towtruck",
    [408] = "Trashmaster",
    [552] = "Utility Van",
    [416] = "Ambulance",
    [433] = "Barracks",
    [427] = "Enforcer",
    [490] = "FBI Rancher",
    [528] = "FBI Truck",
    [407] = "Fire Truck",
    [544] = "Fire Truck",
    [523] = "HPV1000",
    [470] = "Patriot",
    [596] = "Police LS",
    [598] = "Police LV",
    [599] = "Police Ranger",
    [597] = "Police SF",
    [432] = "Rhino",
    [601] = "S.W.A.T.",
    [428] = "Securicar",
    [499] = "Benson",
    [609] = "Black Boxville",
    [498] = "Boxville",
    [524] = "Cement Truck",
    [532] = "Combine Harvester",
    [578] = "DFT-30",
    [486] = "Dozer",
    [406] = "Dumper",
    [573] = "Dune",
    [455] = "Flatbed",
    [588] = "Hotdog",
    [403] = "Linerunner",
    [423] = "Mr. Whoopee",
    [414] = "Mule",
    [443] = "Packer",
    [515] = "Roadtrain",
    [514] = "Tanker",
    [531] = "Tractor",
    [456] = "Yankee",
    [459] = "Berkley's RC Van",
    [422] = "Bobcat",
    [482] = "Burrito",
    [605] = "Damaged Sadler",
    [530] = "Forklift",
    [418] = "Moonbeam",
    [572] = "Mower",
    [582] = "News Van",
    [413] = "Pony",
    [440] = "Rumpo",
    [543] = "Sadler",
    [583] = "Tug",
    [478] = "Walton",
    [554] = "Yosemite",
    [579] = "Huntley",
    [400] = "Landstalker",
    [404] = "Perennial",
    [489] = "Rancher",
    [505] = "Rancher",
    [479] = "Regina",
    [442] = "Romero",
    [458] = "Solair",
    [536] = "Blade",
    [575] = "Broadway",
    [534] = "Remington",
    [567] = "Savanna",
    [535] = "Slamvan",
    [576] = "Tornado",
    [412] = "Voodoo",
    [402] = "Buffalo",
    [542] = "Clover",
    [603] = "Phoenix",
    [475] = "Sabre",
    [429] = "Banshee",
    [541] = "Bullet",
    [415] = "Cheetah",
    [480] = "Comet",
    [562] = "Elegy",
    [565] = "Flash",
    [434] = "Hotknife",
    [494] = "Hotring Racer",
    [502] = "Hotring Racer 2",
    [503] = "Hotring Racer 3",
    [411] = "Infernus",
    [559] = "Jester",
    [561] = "Stratum",
    [560] = "Sultan",
    [506] = "Super GT",
    [451] = "Turismo",
    [558] = "Uranus",
    [555] = "Windsor",
    [477] = "ZR-350",
    [441] = "RC Bandit",
    [464] = "RC Baron",
    [594] = "RC Cam",
    [501] = "RC Goblin",
    [465] = "RC Raider",
    [564] = "RC Tiger",
    [606] = "Baggage Trailer",
    [607] = "Baggage Trailer",
    [610] = "Farm Trailer",
    [584] = "Petrol Trailer",
    [611] = "Trailer",
    [608] = "Stairs Trailer",
    [435] = "Trailer 1",
    [450] = "Trailer 2",
    [591] = "Trailer 3",
    [590] = "Box Freight",
    [538] = "Brown Streak",
    [570] = "Brown Streak Carriage",
    [569] = "Flat Freight",
    [537] = "Freight",
    [449] = "Tram",
    [568] = "Bandito",
    [424] = "BF Injection",
    [504] = "Bloodring Racer",
    [457] = "Caddy",
    [483] = "Camper",
    [508] = "Journey",
    [571] = "Kart",
    [500] = "Mesa",
    [444] = "Monster",
    [556] = "Monster 2",
    [557] = "Monster 3",
    [471] = "Quadbike",
    [495] = "Sandking",
    [539] = "Vortex"
}

function getCarNameById(carId)
    local carName = carNames[carId]
    if carName == nil then
        return carId
    end
    return carName
end

function getPlayerCarInfo()
    local player = gtasa:getInteger("0x77CD98")
    if player == nil then
        return nil
    end
    local car = readInteger(player+0x58C)
    if car == nil then
        return nil
    end
    local carType = carTypes[readBytes(car+1424, 1)]
    local carName = "-"
    local carId1, carId2 = readBytes(car+34, 2)
    if carId1 ~= nil then
        local carId = carId1 + carId2 * 256
        carName = getCarNameById(carId)
    end
    return carType, carName
end

function updatePlayerCarInfo()
    local carType, carName = getPlayerCarInfo()
    if carType == nil then
        GTASAForm.PlayerCar.Caption = "Player Vehicle: -"
    else
        GTASAForm.PlayerCar.Caption = string.format("Player Vehicle: %s (%s)",
            carName, carType)
    end
end

function writeThreads(file)
    --local activeThreads = getThreads("0xA8B42C", 50)
    local activeThreads = getThreads("0x68B42C", 50) -- A92CF0
    local inactiveThreads = getThreads("0x68B428", 3)
    local output = activeThreads.."\n\n"..inactiveThreads
    write(output, file)
    return output
end

function getThreads(startPointer, amount)
    local addr = gtasa:getInteger(startPointer)
    --local addr = 0x997FE0
    local output = ""
    for i = 0, amount, 1 do
        if addr == nil then
            break
        end
        local threadname = readString(addr+8, 10, false)
        if threadname == nil then
            output = output.."("..i.." threads)"
            break
        end
        output = output..threadname.." "
        addr = readInteger(addr)
    end
    return output
end

function isLocalVar(variable)
	return variable:sub(-1,-1) == "@"
end

function getLocalVarAddress(variable)
	variable = variable:sub(1,-2) -- Remove trailing @
	return 0x648960 + variable*4
end

function isGlobalVar(variable)
    return variable:sub(1,1) == "$"
end

function getGlobalVarAddress(variable)
    variable = variable:sub(2) -- Remove leading $
    return 0x649960 + variable*4
end

function getVarAddress(variable)
    if isLocalVar(variable) then
       return getLocalVarAddress(variable)
    end
    if isGlobalVar(variable) then
         return getGlobalVarAddress(variable)
    end
    return nil
end



-------------------------
-- Value Output Rendering
-------------------------

local lastValues = {}
local history = {}
local maxValues = {}
local lastOutput = {}
local maxEnabled = false

-- Determine the longest label out of a table of
-- values, for proper formatting
--
function longestLabel(values)
	local max = 0
	for _,v in ipairs(values) do
		if v[3]:len() &gt; max then
			max = v[3]:len()
		end
	end
	return max
end

function paddedLabel(label, max)
	local pad = max - label:len()
	return string.rep(" ",pad)..label..":"
end

function update(values, file, factor)
	local output = ""
	local longestLabel = longestLabel(values)
	for _,v in ipairs(values) do
        local address = v[1]
		local valueType = v[2]
        local label = v[3]
        local type = v[4]
		local limit = v[5]
		local value

        -- Determine address
		if isLocalVar(address) then
			address = getLocalVarAddress(address)
		end

        -- Get value (game address translation is done in the "get.." functions)
		if valueType == "float" then
			value = gtasa:getFloat(address)
		elseif valueType == "byte" then
			value = gtasa:getByte(address)
		else
			value = gtasa:getInteger(address)
		end

        -- Stop if value nil
        if value == nil then
           return ""
        end

        -- Modify value with function (if available)
		if v.cf ~= nil then
			value = v.cf(value)
			if value == nil then
				value = "n/a"
			end
		end

        -- Previous values handling
		local prev = lastValues[address]
		lastValues[address] = value
        if prev ~= nil and value &lt; prev then
            maxValues[address] = prev
        end
        local max = maxValues[address]

        -- Add value to output
        if v.valueOnly ~= nil then
            output = string.format("%s%s",output,
			       f(value, factor, 5))
        else
            output = string.format("%s%s %s",output,
			       paddedLabel(label, longestLabel),
			       f(value, factor, 5))
        end

		-- Appended Stuff (Difference, History)
        if type == "diff" then
           if value ~= prev and prev ~= nil then
		      local diff = value - prev
			  if diff &gt; 0 then
                  output = output.." (+"..f(diff, factor, 1)..")"
			  else
                  output = output.." ("..f(diff, factor, 1)..")"
              end
           end

			-- Percentage
			if limit ~= nil and value &gt; 0 then
				output = string.format("%s %s",output,"["..math.floor(value / limit * 100).."%]")
			end

			if max ~= nil and maxEnabled then
				output = output.." ["..f(max, factor, 1).."]"
			end
		elseif type == "history" then
			local h = history[address]
			if h == nil then
				h = {}
			end
			if value ~= prev then
				table.insert(h,1,value)
			end
			if #h &gt; 5 then
				table.remove(h,#h)
			end
			local hText = ""
			for k,v in ipairs(h) do
				if k &gt; 1 then
					if k &gt; 2 then
						hText = hText.." &lt; "
					end
					hText = hText..comma_value(v)
				end
			end
			history[address] = h
			if hText:len() &gt; 0 then
				output = output.." ["..hText.."]"
			end
        elseif value ~= prev and v.showChange then
               output = output.." (changed)"
        end

        -- This value done, add linebreak
        output = output.."\n"
    end

    -- Write whole output to file ("write" function still checks some stuff)
    write(output, file)
    return output
end


function write(output, file)
    -- Only write to file if enabled
    if file == nil or not settings:isEnabled("WritingEnabledCheckbox") then
        return
    end
    -- Only write to file if changed
    if output == lastOutput[file] then
        return
    end
    lastOutput[file] = output
    local f,e = io.open(file,'w')
    if f ~= nil then
        f:write(output)
        f:close()
        GTASAForm.ErrorOutput.Caption = ""
    else
        GTASAForm.ErrorOutput.Caption = "Write error ("..e..")"
    end

end

--------------------
-- Utility Functions
--------------------

function comma_value(amount)
    local formatted = amount
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then
            break
        end
    end
    return formatted
end

function f(value, factor, pad)
	if type(value) ~= "number" then
		return value
	end
	value = round(value*factor, 1)
	if factor ~= 1 then
		return comma_value(string.format("%"..pad..".1f", value))
	end
	return comma_value(value)
end

function round(num, idp)
    local mult = 10^(idp or 0)
    return math.floor(num * mult + 0.5) / mult
end

function convertAddress(decimal)
    return string.upper(string.format('%x', decimal))
end

function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end

---------------------
-- Settings Helper --
---------------------

SettingsHelper = {}

-- Setting name should be the name of the element in the form
-- List of boolean setting names
SettingsHelper.booleanSettings = {}

-- List of string settings, each as {"settingName", "default setting"}
SettingsHelper.stringSettings = {}

---
-- Creates a new SettingsHelper object.
--
-- @param  string  settingsName: The name these settings are stored under
-- @param  form    form: The GUI where the setting elements are on
function SettingsHelper:new(settingsName, form)
    local object = {}
    setmetatable(object, self)
    self.__index = self
    object.settingsName = settingsName
    object.form = form
    return object
end

function SettingsHelper:load()
    self.settings = getSettings(self.settingsName)
    for _,v in ipairs(self.booleanSettings) do
        self:setEnabled(v, self.settings.Value[v])
    end
    for _,v in ipairs(self.stringSettings) do
        local value = self.settings.Value[v[1]]
        if value == nil or value == "" then
           value = v[2]
        end
        self.form[v[1]].Text = value
    end
end

function SettingsHelper:save()
    for _,v in ipairs(self.booleanSettings) do
        self.settings.Value[v] = self:isEnabled(v)
    end
    for _,v in ipairs(self.stringSettings) do
        self.settings.Value[v[1]] = self.form[v[1]].Text
    end
end

function SettingsHelper:isEnabled(element)
    return self.form[element]:getState() == cbChecked
end

function SettingsHelper:setEnabled(element, enabled)
    if enabled == "1" then
        self.form[element]:setState(cbChecked)
    else
        self.form[element]:setState(cbUnchecked)
    end
end

function SettingsHelper:getValue(element)
    return self.form[element].Text
end

function SettingsHelper.getPath(str,sep)
    sep = sep or '/'
    return str:match("(.*"..sep..")")
end

function SettingsHelper:selectFilePath(sender, setting)
    local dialog = createSaveDialog(sender)
    local value = self:getValue(setting)
    dialog.Title = "Select file to write to (currently: "..value..")"
    dialog.InitialDir = SettingsHelper.getPath(value,"\\")
    dialog.execute()
    local file = dialog.FileName
    if file ~= nil and file ~= "" then
       self.form[setting].Text = file
    end
end

--------------------------------
-- Initialize Settings Helper --
--------------------------------

settings = SettingsHelper:new("gtasa", GTASAForm)

settings.booleanSettings = {
    "WritingEnabledCheckbox",
    "WriteDupingValuesCheckbox",
    "WriteOtherValuesCheckbox",
    "WriteStatsExpCheckbox",
    "WriteStatsCheckbox",
    "EnableF6Hotkey",
    "AutoAttachCheckbox",
    "DebugOutputCheckbox",
    "OHKOTestCheckbox"
}

settings.stringSettings = {
    {"DupingValuesFile","C:\\ce_duping.txt"},
    {"OtherValuesFile","C:\\ce_misc.txt"},
    {"StatsValuesFile","C:\\ce_stats.txt"},
    {"StatsExpValuesFile","C:\\ce_stats_exp.txt"}
}

-----------------------
-- Timer (Value update)
-----------------------

-- What is written to which file
function fastTimerCallback()
	--update(progressValues, "E:/v.txt", 0.001)
	--
    local formOutput = ""
    if settings:isEnabled("WriteDupingValuesCheckbox") then
       local file = settings:getValue("DupingValuesFile")
       local result = update(phoneValues, file, 1)
       formOutput = formOutput..result.."\n"
    end
    if settings:isEnabled("WriteOtherValuesCheckbox") then
       local file = settings:getValue("OtherValuesFile")
	   local result = update(misc, file, 1)
       formOutput = formOutput..result.."\n"
    end
    if settings:isEnabled("WriteThreadsCheckbox") then
       local result = writeThreads(nil)
       formOutput = formOutput..result.."\n"
    end
    GTASAForm["TextOutputMemo"].Lines.Text = formOutput

    if settings:isEnabled("OHKOTestCheckbox") then
        checkCurrentHealth()
    end
    updatePlayerCarInfo()
end

function slowTimerCallback()
    --debug("slow timer")
    local formOutput = ""
    if settings:isEnabled("WriteStatsCheckbox") then
       local file = settings:getValue("StatsValuesFile")
       local result = update(statValues, file, 1)
       formOutput = formOutput..result.."\n"
    end
    if settings:isEnabled("WriteStatsExpCheckbox") then
        local file = settings:getValue("StatsExpValuesFile")
        local result = update(progressValues, file, 0.001)
        formOutput = formOutput..result.."\n"
    end
    GTASAForm["TextOutput2Memo"].Lines.Text = formOutput
end

local fastTimer
local slowTimer
local hotkey

function init()
    settings:load()

    fastTimer = createTimer(nil, false)
    timer_onTimer(fastTimer, fastTimerCallback)
    timer_setInterval(fastTimer, 50) -- Interval for duping debug etc.
    timer_setEnabled(fastTimer, true)

    slowTimer = createTimer(nil, false)
    timer_onTimer(slowTimer, slowTimerCallback)
    timer_setInterval(slowTimer, 1000) -- Interval for progress values etc.
    timer_setEnabled(slowTimer, true)

    hotkey = createHotkey(hotkeyF6, VK_F6)

    gtasa:init()
end

function hotkeyF6()
    if settings:isEnabled("EnableF6Hotkey") then
       local addr = gtasa:adjustAddress("0x649FC4")
       if readInteger(addr) == 0 then
          writeInteger(addr, 1)
       else
           writeInteger(addr, 0)
       end
     end
end

---------------------------
-- Attach/Version Detection
---------------------------

form_show(GTASAForm)
init()

----------------
-- GUI Functions
----------------

GTASAForm.onClose = function(sender)
    debug("Closed")
    object_destroy(fastTimer)
    object_destroy(slowTimer)
    gtasa:cleanUp()
    hotkey.destroy()
    settings:save()
    -- Only for standalone version
    --closeCE()
    return caHide
end

function AddEntryButtonClick(sender)
    local input = GTASAForm.AddEntryInput.Text
    local address = getVarAddress(input)
    if address ~= nil then
       local adjusted = gtasa:adjustAddress(address)
       local addressText = "\""..gtasa.currentProcess.."\"+"..gtasa:convertAddress(adjusted)
       local addresslist = getAddressList()
       local record = addresslist:createMemoryRecord()
       memoryrecord_setAddress(record, addressText)
       memoryrecord_setDescription(record, input)
    end
end

function AttachButtonClick(sender)
    gtasa:attach(true)
end

function ChangeDupingValuesFileClick(sender)
    settings:selectFilePath(sender, "DupingValuesFile")
end

function ChangeOtherValuesFileClick(sender)
    settings:selectFilePath(sender, "OtherValuesFile")
end

function ChangeStatsValuesFileClick(sender)
    settings:selectFilePath(sender, "StatsValuesFile")
end

function ChangeStatsExpValuesFileClick(sender)
    settings:selectFilePath(sender, "StatsExpValuesFile")
end

function CalculateVarButtonClick(sender)
    local input = GTASAForm.CalculateVarInput.Text
    if string.starts(input, "0x") == false then
       input = "0x"..input
    end
    local varNumber = (input - 0x649960) / 4
    GTASAForm.AddEntryInput.Text = "$"..varNumber
end


</LuaScript>
</CheatTable>
